upstream app {
  # Path to Unicorn SOCK file
  server unix:/tmp/unicorn.wca.sock fail_timeout=0;
}

server {
  listen 80;
  server_name localhost <%= { "production" => "www.worldcubeassociation.org", "staging" => "staging.worldcubeassociation.org", "dev" => "" }[node.chef_environment] %>

  # Deny access to .htaccess files.
  location ~ /\.ht {
    deny all;
  }

  #### Legacy PHP code
  location /results {
    alias <%= @repo_root %>/webroot/results;
    index index.php index.html;

    include fcgi.conf;

    location ^~ /results/admin {
      auth_basic "WCA Results Team Members Only";
      auth_basic_user_file /secrets/results_admins.htpasswd;
      include fcgi.conf;
    }

    location ^~ /results/includes {
      deny all;
    }

    location ^~ /results/generated {
      deny all;
    }
  }

  #### Regulations
  location /regulations {
    index index.html;
    alias <%= @repo_root %>/webroot/regulations;
  }

  #### New rails sytem
  # From http://unicorn.bogomips.org/examples/nginx.conf
  # path for static files
  root <%= @rails_root %>/public;

<% if @rails_env != "development" %>
  # http://vladigleba.com/blog/2014/03/27/deploying-rails-apps-part-4-configuring-nginx/
  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }
<% end %>
  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  try_files $uri/index.html $uri.html $uri @app;

  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    # proxy_set_header X-Forwarded-Proto $scheme;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll/streaming.  It's also safe to set if you're using
    # only serving fast clients with Unicorn + nginx, but not slow
    # clients.  You normally want nginx to buffer responses to slow
    # clients, even with Rails 3.1 streaming because otherwise a slow
    # client can become a bottleneck of Unicorn.
    #
    # The Rack application may also set "X-Accel-Buffering (yes|no)"
    # in the response headers do disable/enable buffering on a
    # per-response basis.
    # proxy_buffering off;
    proxy_pass http://app;
  }
  # Rails error pages
  error_page 500 502 503 504 /500.html;
  client_max_body_size 64M;
  keepalive_timeout 10;
}
